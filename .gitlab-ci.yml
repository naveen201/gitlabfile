stages:
  - clone
  - sonarqube-check
  - build+tag+push+remove
  - change_deployment_file
  - deploy
  - rollback

variables:
  IMAGE_NAME: ""
  IMAGE_TAG: "latest"
  DATE_TAG: "${CI_PIPELINE_ID}"
  REPORT_FILE: "report_${DATE_TAG}.json"
  ARGO_SERVER: "deploycd.com"
  ARGO_USERNAME: ""
  ARGO_PASS: ""
  APPLICATION: ""
  PROJECT: ""
  DEST_CLUSTER: ""
  HELM_DIR: ""
  CD_BRANCH: "$CI_COMMIT_BRANCH"
  NAMESPACE: ""
  ARGOREPO: ""
  TRIVYURL: ""
  VALUES_FILE_NAME: ""
  VALUES_FILE_LOCATION: ""
  GIT_PUSH_REPO: ""
  HEAD: ""

clone_repository:
  stage: clone
  script:
    - git clone ${CI_REPOSITORY_URL} 
    - echo "Repository cloned successfully."
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'



sonarqube-check:
  stage: sonarqube-check
  tags:
    - gitlab-pipeline-runner  # name of gitlab runner tag
  image:
    name: public.ecr.aws/t4m2n0v2/sonarqube:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
    SONAR_HOST_URL: "https://sonarqube.com"
    SONAR_TOKEN: ""
    PROJECT_KEY: "" 
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - |
      sonar-scanner \
        -Dsonar.projectKey="$PROJECT_KEY" \
        -Dsonar.sources="." \
        -Dsonar.host.url="$SONAR_HOST_URL" \
        -Dsonar.scm.revision="$CI_COMMIT_SHA" \
        -Dcustom.branch="$CI_COMMIT_REF_NAME" \
        -Dcustom.author="$GITLAB_USER_NAME" \
        -Dsonar.qualitygate.wait=false
    - |
      echo "SonarQube analysis completed. Now triggering the store API..."
      curl -G "http://ip fo serevr/fetch-store-sonarqube-results" \
           --data-urlencode "project_key=${PROJECT_KEY}" \
           --data-urlencode "committer_name=${GITLAB_USER_NAME:-unknown}" \
           --data-urlencode "commit_id=${CI_COMMIT_SHA:-unknown}" \
           --data-urlencode "branch_name=${CI_COMMIT_REF_NAME:-unknown}"
  allow_failure: true
  only:
    - branches
    - merge_requests



build+tag+push+remove:
  stage: build+tag+push+remove
  image: bentolor/docker-dind-awscli
  services:
    - docker:dind
  script:
    - |
      if [[ "$DEPLOY_ENV" == "beta" ]]; then
        export IMAGE_NAME="293475.dkr.ecr.ap-south-1.amazonaws.com/"
      elif [[ "$DEPLOY_ENV" == "preprod" ]]; then
        export IMAGE_NAME="29374.dkr.ecr.ap-south-1.amazonaws.com/"
      elif [[ "$DEPLOY_ENV" == "prod" ]]; then
        export IMAGE_NAME="2394.dkr.ecr.ap-south-1.amazonaws.com/"
      else
        echo "Unsupported DEPLOY_ENV: $DEPLOY_ENV"
        exit 1
      fi  
      docker build -t ${IMAGE_NAME}:latest .
      docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:$DATE_TAG
      aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      aws configure set default.region ap-south-1
      aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 19237446.dkr.ecr.ap-south-1.amazonaws.com
      docker push $IMAGE_NAME:$DATE_TAG
      docker rmi $IMAGE_NAME:$DATE_TAG
      docker rmi $IMAGE_NAME:latest
      echo "Unused Docker images removed."  

  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'

# trivy_scan_and_upload:
#   stage: scan
#   image: 
#     name: banst/awscli
#     entrypoint: [""]
#   script:
#     - apk add --no-cache curl jq bash 
#     - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | bash -s -- -b /usr/local/bin
#     - trivy image --scanners vuln --format json -o "$REPORT_FILE" ${IMAGE_NAME}:latest
#     - echo "Scan report generated at $(pwd)/report_${CI_PIPELINE_ID}.json"
#     - aws s3 cp "$REPORT_FILE" $TRIVYURL
#     - echo "Scan report uploaded to AWS S3."
#     - rm -rf "$REPORT_FILE"
#     - echo "Scan report deleted."
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web"'

push_changed_deployment_file_to_git:
  stage: change_deployment_file
  script:
    - |
      if [[ "$DEPLOY_ENV" == "beta" ]]; then
        export VALUES_FILE_LOCATION="charts/values.yaml"
        export GIT_PUSH_REPO="https://.git"
        export HEAD="refs/heads/$CI_COMMIT_BRANCH"
      elif [[ "$DEPLOY_ENV" == "preprod" ]]; then
        export VALUES_FILE_LOCATION="charts/values.yaml"
        export GIT_PUSH_REPO="https://.git"
        export HEAD="refs/heads/$CI_COMMIT_BRANCH"
      elif [[ "$DEPLOY_ENV" == "prod" ]]; then
        export VALUES_FILE_LOCATION="charts/values-prod.yaml"
        export GIT_PUSH_REPO="https://.git"
        export HEAD="refs/heads/$CI_COMMIT_BRANCH"
      else
        echo "Unsupported DEPLOY_ENV: $DEPLOY_ENV"
        exit 1
      fi    
      cat $VALUES_FILE_LOCATION
      sed -i "6s/tag.*/tag: ${CI_PIPELINE_ID}/" $VALUES_FILE_LOCATION
      cat $VALUES_FILE_LOCATION
      git config user.name "abc"
      git config user.email "ansh@gamil.com"
      git add .
      git commit -m "Updated the deployment file"
      git branch
      git push "$GIT_PUSH_REPO" HEAD:$HEAD

  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'


argocd_deploy:
  stage: deploy
  before_script:
    - wget -O /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
    - chmod +x /usr/local/bin/argocd
    - apk add --no-cache jq 
  script:
    - |
      if [[ "$DEPLOY_ENV" == "beta" ]]; then
        export APPLICATION=""
        export PROJECT=""
        export DEST_CLUSTER="in-cluster"
        export HELM_DIR="charts"
        export NAMESPACE="beta"
        export ARGOREPO="https://.git"
        export VALUES_FILE_NAME="values.yaml"
      elif [[ "$DEPLOY_ENV" == "preprod" ]]; then
        export APPLICATION="preprod"
        export PROJECT=""
        export DEST_CLUSTER="in-cluster"
        export HELM_DIR="charts"
        export NAMESPACE="preprod"
        export ARGOREPO="https://.git"
        export VALUES_FILE_NAME="values.yaml"
      elif [[ "$DEPLOY_ENV" == "prod" ]]; then
        export APPLICATION="prod"
        export PROJECT=""
        export DEST_CLUSTER="prod-new"
        export HELM_DIR="charts"
        export NAMESPACE=""
        export ARGOREPO="https://.git"
        export VALUES_FILE_NAME="values-prod.yaml"
      else
        echo "Unsupported DEPLOY_ENV: $DEPLOY_ENV"
        exit 1
      fi
      argocd login deploycd.com --username admin --password ask*!&@dhrSdn!@# --grpc-web
      argocd app create $APPLICATION --project $PROJECT --repo $ARGOREPO --path $HELM_DIR --revision $CD_BRANCH --dest-namespace $NAMESPACE --dest-name $DEST_CLUSTER --sync-option auto-createnamespace=true --values $VALUES_FILE_NAME --upsert --grpc-web
      argocd app sync $APPLICATION --prune --grpc-web
      sleep 40
      argocd app wait --health $APPLICATION --timeout 100 --grpc-web
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'

rollback_deployment:
  stage: rollback
  before_script:
    - wget -O /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
    - chmod +x /usr/local/bin/argocd
    - apk add --no-cache jq 
  script:
    - |
      if [[ "$DEPLOY_ENV" == "beta" ]]; then
        export APPLICATION="ackend"
        export PROJECT=""
        export DEST_CLUSTER="in-cluster"
        export HELM_DIR="charts"
        export NAMESPACE="beta"
        export ARGOREPO="https://.git"
        export VALUES_FILE_NAME="values.yaml"
      elif [[ "$DEPLOY_ENV" == "preprod" ]]; then
        export APPLICATION="preprod"
        export PROJECT=""
        export DEST_CLUSTER="in-cluster"
        export HELM_DIR="charts"
        export NAMESPACE="preprod"
        export ARGOREPO="https://.git"
        export VALUES_FILE_NAME="values.yaml"
      elif [[ "$DEPLOY_ENV" == "prod" ]]; then
        export APPLICATION="prod"
        export PROJECT=""
        export DEST_CLUSTER="prod-new"
        export HELM_DIR="charts"
        export NAMESPACE="prod"
        export ARGOREPO="https://.git"
        export VALUES_FILE_NAME="values-prod.yaml"
      else
        echo "Unsupported DEPLOY_ENV: $DEPLOY_ENV"
        exit 1
      fi
      argocd login ${ARGO_SERVER} --username ${ARGO_USERNAME} --password ${ARGO_PASS} --grpc-web
      previousRevision=$(argocd app history ${APPLICATION} --output json --grpc-web | awk 'NR==10{print $1}')
      argocd app rollback ${APPLICATION} ${previousRevision} --grpc-web
      sleep 40
      argocd app wait --health ${APPLICATION} --timeout 100 --grpc-web
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: on_failure



after_script:
  - |
    apk add --no-cache curl
    success_emoji=":white_check_mark:"
    failure_emoji=":x:"
    if [[ "$CI_PIPELINE_SOURCE" == "push" || "$CI_PIPELINE_SOURCE" == "merge_request_event" ]]; then
      if [[ "$CI_JOB_NAME" == "sonarqube-check" && "$CI_JOB_STATUS" == "success" ]]; then
        # Success message for SonarQube analysis
        message="*Status:* PASSED $success_emoji\n*Repository:* $CI_PROJECT_PATH *Branch:* $CI_COMMIT_REF_NAME\n*User:* $GITLAB_USER_NAME\n*Details:* <$CI_JOB_URL|Job Details>"
        username="SONARQUBE"
        icon_emoji=":sonarqube:"
        channel="#-deployments"
        result_color="good"
        send_notification=true
      else
        # Failure message for SonarQube analysis
        message="*Status:* FAILED $failure_emoji\n*Repository:* $CI_PROJECT_PATH *Branch:* $CI_COMMIT_REF_NAME\n*User:* $GITLAB_USER_NAME\n*Details:* <$CI_JOB_URL|Job Details>"
        username="SONARQUBE-ANALYSIS"
        icon_emoji=":sonarqube:"
        channel="-deployments"
        result_color="danger"
        send_notification=true
      fi
    fi

    if [ "$CI_PIPELINE_SOURCE" == "web" ]; then
      if [ "$CI_JOB_STATUS" == "failed" ]; then
        FAILED_STAGE=$(echo "$CI_JOB_STAGE" | tr '_' ' ' | awk '{print toupper($0)}')
        message="*Status:* FAILED $failure_emoji AT $FAILED_STAGE STAGE\n*Repository:* $CI_PROJECT_PATH *Branch:* $CI_COMMIT_REF_NAME\n*Environment:* $DEPLOY_ENV\n*User:* $GITLAB_USER_NAME\n*Details:* <$CI_PIPELINE_URL|Pipeline Details>"
        username="Gitlab-Pipeline"
        icon_emoji=":gitlabpipeline:"
        channel="#-deployments"
        result_color="danger"
        send_notification=true
      fi
    fi

    if [ "$CI_JOB_NAME" == "argocd_deploy" ]; then
      if [ "$CI_JOB_STATUS" == "success" ]; then
        message="*Status:* SUCCESS $success_emoji\n*Repository:* $CI_PROJECT_PATH *Branch:* $CI_COMMIT_REF_NAME\n*Environment:* $DEPLOY_ENV\n*User:* $GITLAB_USER_NAME\n*Details:* <$CI_PIPELINE_URL|Pipeline Details>"
        username="Gitlab-Pipeline"
        icon_emoji=":gitlabpipeline:"
        channel="#-deployments"
        result_color="good"
        send_notification=true
      fi
    fi

    if [ "$send_notification" == "true" ]; then
      # Send notification to Slack
      curl -X POST -H 'Content-type: application/json' --data "{
        \"channel\": \"$channel\",
        \"username\": \"$username\",
        \"icon_emoji\": \"$icon_emoji\",
        \"attachments\": [{
          \"color\": \"$result_color\",
          \"text\": \"$message\",
          \"mrkdwn_in\": [\"text\"]
        }]
      }" https://hooks.slack.com/services/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
    fi
